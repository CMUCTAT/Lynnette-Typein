rule DistributeMultiplication{
	salience: 5;
	when{
		b: Boolean b === true from false;
	}then {
		console.log("distributemultiplication");
	}
}


rule CancelDivision {
	salience: 5;
	when {
		b: Boolean b === true from false;
	} then {
		console.log("canceldivision");
	}
}

rule CombineDivTerms {
	salience: 5;
	when{
		b: Boolean b === true from false;
	} then {
		console.log("combinedivterms");
	}
}

rule DivideProductTerm{
	salience: 5;
	when {
		b: Boolean b === true from false;
	}
	then {   // simplest way may be to modify the coeff of the dividend term and move it to the toplevel
		console.log("divideproductterm");
	}
}

/**
	MOVED DISTRIBUTION TO TRANSFORMATIONS
**/

rule distributeNegOne { //special case for -(ax+n)
	salience: 5;
	when {
		p: Problem !p.equationChanged;
		exp: TreeExp {side: s};
		toDistribute: Object toDistribute.toDistribute === "-1" && !hasCancelable(exp, toDistribute.plusNode.node) from exp.eqData.distributable;
		otherExp: TreeExp otherExp !== exp;
		operand: String from s+toDistribute.toDistribute.toString();
		ci: cycleInfo ci.searchType === "detailed" || ci.isNextStepSearch;
		ri: rowInfo;
	} then {
		
		var plusNode = toDistribute.term;
			
		var expStr = exp.tree.toString();
		var plusNodeStr = plusNode.toString();
		var distribute = "-1";
		var expBefore = getFullStr(exp, otherExp);
		
		//perform distribution
		var distributedStr = algApplyRules(plusNodeStr, ["distribute", "flatten"]);
		
		//generate new expression string
		var newExpStr, newFullStr, newExpHintStr;
		if (toDistribute.parent) {
			let parentStr = toDistribute.parent.toString();
			if (!parentStr.startsWith(plusNodeStr) && !distributedStr.startsWith("-")) {
				distributedStr = "+"+distributedStr;
			}
			let newStr = parentStr.replace(plusNodeStr, distributedStr);
			newExpStr = expStr.replace(parentStr, newStr);
		} else {
			//term to distribute is full side of expression
			newExpStr = distributedStr;
		}
		let newExp = algParse(newExpStr, true, true);
		newExpStr = newExp.toString();
		let otherExpStr = otherExp.tree.toString();
		
		//generate hint/input strings
		newFullStr = newExpStr < otherExpStr ? newExpStr + ' = ' + otherExpStr : otherExpStr + ' = ' + newExpStr;
		let input = exp.side === "left" ? newExpStr+' = '+otherExpStr : otherExpStr+' = '+newExpStr;
		var newOpStr = ci.opStr+'t,DistributeMultiplicationOrDivision '+s+distribute.toString()+';';
		var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFullStr;
		let mOrD = "m";
		let skill = "distribute-multiplication";
		if (ci.searchType === "abstract" || ci.selection === "hint") {
			assert(new Skill(skill, "transformation"));
		}
		setCTNodeData(toMemo);
		
	//	console.log("distribute");
	//	console.log("newExpStr is ",newExpStr, " newFullStr is ",newFullStr," input is ",input," hintInput is ",hintInput);
		
		//gen diagram data
		if (ci.isNextStepSearch || ci.searchType === "detailed") {
			var newTrans = {
				operation: toDistribute.operation,
				operand: distribute,
				expBefore: expBefore,
				expAfter: input
			};
			modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
		}
		
		var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
		if(ci.isNextStepSearch) {
			//diagram first data
			if (p.diagramsFirst && p.generatingSteps && !dupInput) {
				let stepHints = [
					"Which diagram represents a good next step?",
					"Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
				];
				let stepSkills = {
					diagram: ["selectd-"+toDistribute.operation],
					typein: [skill]
				};
				addValidStep(toDistribute.operation, distribute, expBefore, input, stepHints, stepSkills);
			}
			//predict step if valid
			if ((!p.forceSimplify || !ci.canSimplify) &&
				(p.generatingSteps || isNextStep(toDistribute.operation, distribute, p))){
				setChainPriority(1);
				let pNode = toDistribute.plusNode.node,
					other = "-1";
				assert(new Hint("You can simplify the "+s+" side by distributing the negative sign."));
				assert(new Hint("Multiply each of the terms in the expression "+pNode+" by -1"));
				if (p.dragNDrop) {
					assert(new Hint("Drag "+eqStr(factorExpr2.terms)+" over "+eqStr(factorExpr1.terms)));
				} else {
					assert(new Hint("Enter "+input));
				}
				checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
			}
			backtrack();
		} else if (dupInput) {
			backtrack();
		} else{
			recordInput(toMemo, 'full-'+ci.searchType);
			let ciMods = {"modified": true, "opStr": newOpStr};
			if (ci.searchType === "abstract") {
				ciMods.needSimp = true;
			} else {
				ciMods.reqTransformations = ci.reqTransformations.slice(1);
				ciMods.steps = ci.steps.slice().concat({input, skill});
			}
		
			equationChanged(exp, newExp);
			bulkModify(ci, ciMods);
		}
	
	}
}

rule Divide{
	salience: 5;
	when {
		p: Problem !p.equationChanged;
		ci: cycleInfo ci.searchType === "detailed" || ci.isNextStepSearch;
		exp: TreeExp {side: s};
		toDivide: Object from exp.eqData.dividable;
		otherExp: TreeExp otherExp !== exp;
	}
	then {		
		var timesNode = toDivide.timesNode;
		var timesNodeStr = timesNode.toString();
		var quotient = algParse(algSimplify(toDivide.numer.toString()+"*"+toDivide.denom.toString()));
		var quotientStr = quotient.toString();
		var divType = '';
		var divideBy = algSimplify(toDivide.denom+"^-1");
		var newOpStr = ci.opStr+'s,divide '+timesNodeStr+';';
		if (timesNode.factors.length > 2) {
			let toDivideCpy = algParse(timesNode);
			let s1Idx = timesNode.factors.indexOf(toDivide.numer),
				s2Idx = timesNode.factors.indexOf(toDivide.denom),
				higher = s1Idx > s2Idx ? s1Idx : s2Idx,
				lower = higher === s1Idx ? s2Idx : s1Idx;
			toDivideCpy.factors.splice(higher, 1);
			toDivideCpy.factors.splice(lower, 1);
			if (quotientStr !== '1') {
				toDivideCpy.factors.push(quotient);
				divType = 'divIntoMult';
			} else {
				divType = 'cancellation';
			}
			quotient = algParse(toDivideCpy.toString(), true, true); //so we don't get a 1-factor TIMES node
		} else {
			divType = 'simpleDivision';
			quotient = algParse(algSimplify(quotientStr+'*'+timesNode.sign));
		}
		
		var newExpStr, newFullStr;
		if (toDivide.parent) {
			let parentStr = toDivide.parent.toString();
			let parentCpy = algParse(parentStr);
			parentCpy.terms.splice(toDivide.childIdx,1,quotient);
			let newParentStr = parentCpy.toString();	
			newExpStr = exp.tree.toString().replace(parentStr, newParentStr);
			newExp = algParse(newExpStr, true, true);
		} else {
			//division term was whole expression
			newExp = algApplyRules(algParse(quotient, true, true), ["flatten"]);
		}
		newExpStr = newExp.toString();
		let otherExpStr = otherExp.tree.toString();
		newFullStr = newExpStr < otherExpStr ? newExpStr + ' = ' + otherExpStr : otherExpStr + ' = ' + newExpStr;
		let input = exp.side === "left" ? newExpStr+' = '+otherExpStr : otherExpStr+' = '+newExpStr;
		setCTNodeData(input);
		
		let skill = "simplify-division";
		assert(new Skill(skill, "simplification"));
		
		if(ci.isNextStepSearch) {
			setChainPriority(1);
			assert(new Hint("You can simplify the fraction on the "+s+" side."));
			switch (divType) {
				case 'cancellation':
					//"in the term <frac>, the two <n>s cancel each other out"
					assert(new Hint("In the term "+timesNode+", the "+toDivide.numer+" on the bottom cancels out the "+toDivide.numer+" on top."));
				break;
				case 'divIntoMult': 
					//"in the term <frac>, you can divide <numer> by <denom>
					assert(new Hint("In the term "+timesNode+", you can divide "+toDivide.numer+" by "+divideBy));
				break;
				case 'simpleDivision': 
					//what is <numer> divided by <denom>?
					assert(new Hint("What is "+toDivide.numer+" divided by "+divideBy+'?'));
				break;
			}
			assert(new Hint("Replace "+timesNode+" with "+quotient));
			
			if (p.dragNDrop) {
				assert(new Hint("Drag "+eqStr(factorExpr2.terms)+" over "+eqStr(factorExpr1.terms)));
			} else {
				assert(new Hint("Enter "+input));
			}
			checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
			backtrack();
		} else if (inputRepeated(newFullStr, 'full-detailed')) {
			backtrack();
		} else {
			recordInput(newFullStr, 'full-detailed');
			equationChanged(exp, newExp);
			
			let newSteps = ci.steps.slice().concat({input, skill});
			bulkModify(ci, {"modified": true, "opStr": newOpStr, "steps": newSteps});
		}
	}
}

rule Multiply{
	salience: 5;
	when {
		p: Problem !p.equationChanged;
		ci: cycleInfo ci.searchType === "detailed" || ci.isNextStepSearch;
		exp: TreeExp {side: eSide};
		toMultiply: Object from exp.eqData.multipliable;
		otherExp: TreeExp otherExp !== exp;
	}
	then {
		
		var timesNode = toMultiply.timesNode;
		var multStr = toMultiply.factors.map((f)=>f.toString()).join("*");
		var product = algParse(algSimplify(multStr));
		var productStr = product.toString();
		var newOpStr = ci.opStr+'s,multiply '+multStr+';';
		if (timesNode.factors.length > 2) {
			let toMultiplyCpy = algParse(timesNode);
			let s1Idx = timesNode.factors.indexOf(toMultiply.factors[0]),
				s2Idx = timesNode.factors.indexOf(toMultiply.factors[1]),
				higher = s1Idx > s2Idx ? s1Idx : s2Idx,
				lower = higher === s1Idx ? s2Idx : s1Idx;
			toMultiplyCpy.factors.splice(higher, 1);
			toMultiplyCpy.factors.splice(lower, 1);
			if (productStr !== '1') {
				toMultiplyCpy.factors.push(product);
			}
			product = algParse(toMultiplyCpy.toString()); //so we don't get a 1-factor TIMES node
		} else {
			product = algParse(algSimplify(productStr+'*'+timesNode.sign));
		}
		
		var newExpStr, newFullStr;
		if (toMultiply.parent) {
			let parentStr = toMultiply.parent.toString();
			let parentCpy = algParse(parentStr);
			parentCpy.terms.splice(toMultiply.childIdx,1,product);
			let newParentStr = parentCpy.toString();	
			newExpStr = exp.tree.toString().replace(parentStr, newParentStr);
			newExp = algParse(newExpStr, true, true);
		} else {
			//product term was whole expression
			newExp = algApplyRules(algParse(product, true, true), ["flatten"]);
		}
		newExpStr = newExp.toString();
		let otherExpStr = otherExp.tree.toString();
		newFullStr = newExpStr < otherExpStr ? newExpStr + ' = ' + otherExpStr : otherExpStr + ' = ' + newExpStr;
		let input = eSide === "left" ? newExpStr+' = '+otherExpStr : otherExpStr+' = '+newExpStr;
		setCTNodeData(input);
		if (ci.isNextStepSearch) {
			setChainPriority(1);
			assert(new Hint("You can simplify the "+eSide+" side by multiplying two terms together."));
			assert(new Hint("What is "+toMultiply.factors[0]+" times "+toMultiply.factors[1]+"?"));
			if (p.dragNDrop) {
				assert(new Hint("Drag "+simpleTermStr(factorTerm1)+" over "+simpleTermStr(factorTerm2)+" to multiply them."));
			} else {
				assert(new Hint("Enter "+input));
			}
			checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
			backtrack();
		}else if (inputRepeated(newFullStr, 'full-detailed')) {
			backtrack();
		} else{
			recordInput(newFullStr, 'full-detailed');
			equationChanged(exp, newExp);
			
			let newSteps = ci.steps.slice().concat({input});
			bulkModify(ci, {"modified": true, "opStr": newOpStr, "steps": newSteps});
		}
	}
}

rule CancelOrCombineLikeTerms {
	salience : 6;
	when {
		p: Problem !p.equationChanged;
		ci: cycleInfo ci.searchType === "detailed" || ci.isNextStepSearch;
		exp: TreeExp {side: eSide};
		termPair: Object from exp.eqData.combinablePairs;
		otherExp: TreeExp otherExp !== exp;
	}
	then {
		var t1 = termPair.t1,
			t2 = termPair.t2,
			t1Str = t1.term.toString(),
			t2Str = t2.term.toString(),
			termParent = t1.parent,
			termParentStr = termParent.toString();
		var addStr = t1Str+'+'+t2Str;
		var sumOfTerms = algSimplify(algParse(addStr));
		var sumStr = sumOfTerms.toString();
		var simpType = '';
		var newParentTerms = termParent.terms.slice(); //copy terms arr of parent node to combine terms
		
		var indices = [t1.childIdx, t2.childIdx].sort();
		newParentTerms.splice(indices.pop(), 1); //rem t1 from copy
		newParentTerms.splice(indices.pop(), 1); //rem t2 from copy
		
		
		if (sumStr !== '0') {
			newParentTerms.push(sumOfTerms); //add new term that is sum of combined terms
			simpType = 'combine';
		} else {
			simpType = 'cancel';
			if (newParentTerms.length === 0) {
				newParentTerms.push(sumOfTerms);
			}
		}
		
		var newOpStr = ci.opStr+'s,'+simpType+" "+addStr+';';
		
		var newParentTree = algParse(termParentStr); //copy of parent tree
		newParentTree.terms = newParentTerms; //replace tree copy terms w/ our own
		var newParentStr = newParentTree.toString(); //stringify modified tree copy
		
		var expTreeStr = exp.tree.toString();
		var toParse = expTreeStr.replace(termParentStr, newParentStr);
		var parsed = algParse(toParse, true, true);
		var newExp = algApplyRules(parsed, ["flatten"]); //replace old parent str w/ ours
		let newExpStr = newExp.toString();
		let otherExpStr = otherExp.tree.toString();
		newFullStr = newExpStr < otherExpStr ? newExpStr + ' = ' + otherExpStr : otherExpStr + ' = ' + newExpStr;
		let input = eSide === "left" ? newExpStr+' = '+otherExpStr : otherExpStr+' = '+newExpStr;
		setCTNodeData((exp.side === "left" ? newExpStr : otherExpStr) + ' = ' + (otherExp.side === "right" ? otherExpStr : newExpStr));
		
		var skill = simpType === "cancel" ? "cancel-" : "combine-like-";
		skill += t1Str.includes(p.varName) ? 'var' : 'const';
		assert(new Skill(skill, "simplification"));
		
		if (ci.isNextStepSearch) {
			setChainPriority(1);
			assert(new Hint("You have two terms on the "+eSide+" side that you can add together"));
			if (simpType === "combine") {
				assert(new Hint("On the "+eSide+" side, combine like terms by adding "+t1.term+" and "+t2.term+"."));
			} else {
				assert(new Hint("On the "+eSide+" side, cancel like terms by removing "+t1.term+" and "+t2.term+" from the equation."));
			}
			if (p.dragNDrop) {
				assert(new Hint("Drag "+term1+" onto "+term2));
			} else {
				assert(new Hint("Enter "+input));
			}
			checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
			backtrack();
		} else if (inputRepeated(newFullStr, 'full-detailed')) {
			backtrack();
		} else{
			recordInput(newFullStr, 'full-detailed');
			equationChanged(exp, newExp);
			
			let newSteps = ci.steps.slice().concat({input, skill});
			bulkModify(ci, {"modified": true, "opStr": newOpStr, "steps": newSteps});
		}
	}
}