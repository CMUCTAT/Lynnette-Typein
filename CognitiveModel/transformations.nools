
rule simplifyForAbstractSearch {
    salience: 9;
    when {
        ci: cycleInfo ci.searchType === "abstract" && ci.needSimp;
        e1: TreeExp e1.side === "left";
        e2: TreeExp e2.side === "right";
    } then {
        console.log("simplifyForAbstractSearch:",e1.toString(),e2.toString()); 
        let simpTree1 = simplifyNoDistribute(e1.tree,true),
            simpTree2 = simplifyNoDistribute(e2.tree,true);
        
        equationChanged(e1, simpTree1);
        equationChanged(e2, simpTree2);
        modify(ci, "needSimp", false);
        if (!ci.modified) {
            modify(ci, "modified", true);
        }
        console.log("after simplify:",simpTree1.toString(),simpTree2.toString());
    }
}


rule DistributeMultiplicationOrDivision{
    salience: 5;
    when {
        p: Problem !p.equationChanged;
        exp: TreeExp {side: s};
        toDistribute: Object !hasCancelable(exp, toDistribute.plusNode.node) && toDistribute.toDistribute !== "-1" from exp.eqData.distributable;
        otherExp: TreeExp otherExp !== exp;
        operand: String from s+toDistribute.toDistribute.toString();
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "DistributeMultiplicationOrDivision", operand);
        ri: rowInfo;
    } then {
        var timesNode = toDistribute.term;
        if (timesNode.factors.length !== 2) {
            throw new Error("distributeDivision can't (yet) handle > 2 factors");
        } else {
            
            var expStr = exp.tree.toString();
            var timesNodeStr = timesNode.toString();
            var distribute = toDistribute.toDistribute;
            var expBefore = getFullStr(exp, otherExp);
            
            //perform distribution
            var distributedStr = algApplyRules(timesNodeStr, ["distribute", "flatten"]);
            var distHintStr = mathUtil.distributeMultiplication(distribute, toDistribute.plusNode.node, timesNode.sign < 0);
            
            //generate new expression string
            var newExpStr, newFullStr, newExpHintStr;
            if (toDistribute.parent) {
                let parentStr = toDistribute.parent.toString();
                let newStr = parentStr.replace(timesNodeStr, distributedStr);
                let newHintStr = parentStr.replace(timesNodeStr, distHintStr);
                newExpStr = expStr.replace(parentStr, newStr);
                newExpHintStr = expStr.replace(parentStr, newHintStr);
            } else {
                //term to distribute is full side of expression
                newExpStr = distributedStr;
                newExpHintStr = distHintStr;
            }
            let newExp = algParse(newExpStr, true, true);
            newExpStr = newExp.toString();
            let otherExpStr = otherExp.tree.toString();
            
            //generate hint/input strings
            newFullStr = newExpStr < otherExpStr ? newExpStr + ' = ' + otherExpStr : otherExpStr + ' = ' + newExpStr;
            let input = exp.side === "left" ? newExpStr+' = '+otherExpStr : otherExpStr+' = '+newExpStr;
            let hintInput = exp.side === "left" ? newExpHintStr+' = '+otherExpStr : otherExpStr+' = '+newExpHintStr;
            var newOpStr = ci.opStr+'t,DistributeMultiplicationOrDivision '+s+distribute.toString()+';';
            var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFullStr;
            let mOrD = toDistribute.operation === "dist-times" ? "m" : "d";
            let skill = mOrD === "m" ? "distribute-multiplication" : "distribute-division";
            if (ci.searchType === "abstract" || ci.selection === "hint") {
                assert(new Skill(skill, "transformation"));
            }
            setCTNodeData(toMemo);
            
        //  console.log("distribute");
        //  console.log("newExpStr is ",newExpStr, " newFullStr is ",newFullStr," input is ",input," hintInput is ",hintInput);
            
            //gen diagram data
            if (ci.isNextStepSearch || ci.searchType === "detailed") {
                var newTrans = {
                    operation: toDistribute.operation,
                    operand: distribute,
                    expBefore: expBefore,
                    expAfter: input
                };
                modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
            }
            
            var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
            if(ci.isNextStepSearch) {
                //diagram first data
                if (p.diagramsFirst && p.generatingSteps && !dupInput) {
                    let stepHints = [
                        "Which diagram represents a good next step?",
                        "Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
                    ];
                    let stepSkills = {
                        diagram: ["selectd-"+toDistribute.operation],
                        typein: [skill]
                    };
                    addValidStep(toDistribute.operation, distribute, expBefore, input, stepHints, stepSkills);
                }
                //predict step if valid
                if ((!p.forceSimplify || !ci.canSimplify) &&
                    (p.generatingSteps || isNextStep(toDistribute.operation, distribute, p))){
                    setChainPriority(1);
                    let pNode = toDistribute.plusNode.node,
                        other = algParse(timesNode.factors.filter((f)=>f !== pNode)[0]);
                    other = mOrD === "m" ? other : algSimplify(other+"^-1");
                    other.sign *= timesNode.sign;
                    assert(new Hint("You can simplify the "+s+" side by distributing the "+(mOrD === "m" ? "multiplication" : "division")));
                    assert(new Hint((mOrD === "m" ? "Multiply" : "Divide")+" each of the terms in the expression "+pNode+" by "+other));
                    if (p.dragNDrop) {
                        assert(new Hint("Drag "+eqStr(factorExpr2.terms)+" over "+eqStr(factorExpr1.terms)));
                    } else {
                        assert(new Hint("Enter "+hintInput));
                    }
                    checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: hintInput});
                }
                backtrack();
            } else if (dupInput) {
                backtrack();
            } else{
                recordInput(toMemo, 'full-'+ci.searchType);
                let ciMods = {"modified": true, "opStr": newOpStr};
                if (ci.searchType === "abstract") {
                    ciMods.needSimp = true;
                } else {
                    ciMods.reqTransformations = ci.reqTransformations.slice(1);
                }
                
                //check if step matches diagram picked (diagram first only)
                
            /*  
                
                if (!p.generatingSteps && !isNextStep(toDistribute.operation, distribute, p)) {
                    ciMods.inputIsBug = true;
                    ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
                }
            
            */
            
                equationChanged(exp, newExp);
                bulkModify(ci, ciMods);
            }
        }
    }
}



rule multiplyBothSides {
    salience: 7;
    when {
        p: Problem;
        e1: TreeExp e1.eqData.operation.includes("divide") {side: side1};
        multiplyBy: String getAbs(e1.dividedBy) !== getAbs(multiplyBy) && getAbs(e1.multipliedBy) !== getAbs(multiplyBy) && !canCancelDivisor(e1.tree, multiplyBy)
            from e1.eqData.denominator;
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "multiplyBothSides", multiplyBy);
        ri: rowInfo;
        e2: TreeExp e2.side !== e1.side;
        //side1 operator is divide
        // one operand of ^ is const
        // ^ wasn't newly divided into expression
    } then {
        var expBefore = getFullStr(e1, e2);
        var multByStr = multiplyBy.toString();
        var preParse1 = mathUtil.multiplyBy(e1.tree.toString(), multByStr);
        var preParse2 = mathUtil.multiplyBy(e2.tree.toString(), multByStr);
        
        var newExp1 = algApplyRules(algParse(preParse1, true, true), ["popNegation"]);
        var newExp2 = algApplyRules(algParse(preParse2, true, true), ["popNegation"]);
        
        var newExp1Str = newExp1.toString();
        var newExp2Str = newExp2.toString();
    
        var newFull = newExp1Str < newExp2Str ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str;
        var input = side1 === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str;
        var newOpStr = ci.opStr+'t,multiplyBothSides '+multByStr+';';
        var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
        
        setCTNodeData(toMemo);
        
        //gen diagram data
        if (ci.isNextStepSearch || ci.searchType === "detailed") {
            var newTrans = {
                operation: 'multiply',
                operand: multByStr,
                expBefore: expBefore,
                expAfter: input
            };
            modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
        }
        
        var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
        if (ci.isNextStepSearch) {
            
            //diagram first data
            if (p.diagramsFirst && p.generatingSteps && !dupInput) {
                let stepHints = [
                    "Which diagram represents a good next step?",
                    "Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
                ];
                let stepSkills = {
                    diagram: ["selectd-multiply"],
                    typein: ["multiplication"]
                };
                addValidStep('multiplication', multByStr, expBefore, input, stepHints, stepSkills);
            }
            //predict step if valid
            if ((!p.forceSimplify || !ci.canSimplify) &&
                (p.generatingSteps || isNextStep('multiplication', multByStr, p))) {
                assert(new Hint("You can eliminate the division on the "+side1+" side by multiplying both sides by the divisor."));
                assert(new Hint("Multiply both sides of the equation by "+multByStr));
                assert(new Hint("Enter "+input));
                checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
            }
            backtrack();
        } else if (dupInput) {
            backtrack();
        } else {
            recordInput(toMemo, 'full-'+ci.searchType);
            let ciMods = {"modified": true, "opStr": newOpStr};
            if (ci.searchType === "abstract") {
                ciMods.needSimp = true;
            } else {
                ciMods.reqTransformations = ci.reqTransformations.slice(1);
            }
            equationChanged(e1, newExp1, {multipliedBy: multByStr});
            equationChanged(e2, newExp2, {multipliedBy: multByStr});
            
            //check if step matches diagram picked (diagram first only)
            if (!p.generatingSteps && !isNextStep("multiplication", multByStr, p)) {
                ciMods.inputIsBug = true;
                ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
            }
            
            bulkModify(ci, ciMods);
        }
    }
}


/*
transformation

divide the equation by the factor of the productTerm
c(ax+b) = d => c(ax + b)/c = d/c 
*/
rule divideFactor{
    salience: 7;
    when{
        p: Problem;
        e1: TreeExp e1.eqData.operation === "dist-times" {side: side1};
        distTerm: Object !distTerm.parent from e1.eqData.distributable;
        ri: rowInfo;
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "divideFactor", distTerm.coeff)
            {ogStr: expBefore};
        e2: TreeExp e2.side !== e1.side && divisibleBy(e2.eqData.factors, distTerm.coeff);// && !hasCancelable(e2);
        //side1 operator is times
          //one operand of ^ is const
        //side2 is divisible by ^
    }
    then{
        var expBefore = getFullStr(e1, e2);
        var preParse1 = mathUtil.divideBy(e1.tree.toString(), distTerm.coeff);
        var preParse2 = mathUtil.divideBy(e2.tree.toString(), distTerm.coeff);
        
        var newExp1 = algApplyRules(algParse(preParse1, true, true), ["popNegation"]);
        var newExp2 = algApplyRules(algParse(preParse2, true, true), ["popNegation"]);
        
        var newExp1Str = newExp1.toString();
        var newExp2Str = newExp2.toString();
        var newFull = newExp1Str < newExp2Str ? newExp1Str + ' = ' + newExp2Str : newExp2Str + ' = ' + newExp1Str;
        var input = (e1.side === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str);
        var newOpStr = ci.opStr+'t,divideFactor '+distTerm.coeff+';';
        var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
        
        setCTNodeData(toMemo);
        if (ci.searchType === "abstract" || ci.selection === "hint") {
            assert(new Skill("division-complex", "transformation"));
        }
        
        //gen diagram data
        if (ci.isNextStepSearch || ci.searchType === "detailed") {
            var newTrans = {
                operation: 'division',
                operand: distTerm.coeff,
                expBefore: expBefore,
                expAfter: input
            };
            modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
        }
        
        var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
        if (ci.isNextStepSearch) {
            
            //diagram first data
            if (p.diagramsFirst && p.generatingSteps && !dupInput) {
                let stepHints = [
                    "Which diagram represents a good next step?",
                    "Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
                ];
                let stepSkills = {
                    diagram: ["selectd-divide-complex"],
                    typein: ["division-complex"]
                };
                addValidStep('division', distTerm.coeff, expBefore, input, stepHints, stepSkills);
            }
            
            if ((!p.forceSimplify || !ci.canSimplify) &&
                (p.generatingSteps || isNextStep('division', distTerm.coeff, p))) { 
                assert(new Hint("You have a product term on the "+side1+" side.  You can divide both sides by one of its factors."));
                assert(new Hint("Divide both sides by "+distTerm.coeff));
                if (p.dragNDrop) {
                    var pt = getFacts("PartialTransformation")[0];
                    if (!pt) {
                        assert(new Hint("Drag the division operator onto the "+s+" side."));
                    }
                } else {
                    assert(new Hint("Enter "+input));
                }
                checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
            }
            backtrack();
        } else if (dupInput) {
            backtrack();
        } else {
            recordInput(toMemo, 'full-'+ci.searchType);
            let ciMods = {"modified": true, "opStr": newOpStr};
            if (ci.searchType === "abstract") {
                ciMods.needSimp = true;
            } else {
                ciMods.reqTransformations = ci.reqTransformations.slice(1);
            }
            equationChanged(e1, newExp1, {'dividedBy': ''+distTerm.coeff});
            equationChanged(e2, newExp2, {'dividedBy': ''+distTerm.coeff});
            //check if step matches diagram picked (diagram first only)
            if (!p.generatingSteps && !isNextStep("division", distTerm.coeff, p)) {
                ciMods.inputIsBug = true;
                ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
            }
            bulkModify(ci, ciMods);
        }
    }
}
/*
transformation

divide the whole expression by coeff of the variable
ax + b + c = d => (ax + b + c) / a = d / a
*/

rule divideByXCoefficient {
    salience: 7;
    when {
        //side1
        // one operand of ^ is var term
        // coeff of ^ is not 1
        //rest of side1 is divisible by ^
        //side2 is divisible by ^
        p: Problem;
        e1: TreeExp; //e1.eqData.varOperands.length === 1 && !hasCancelable(e1) {side: side1};
        varTerm: Object varTerm.coeff !== 1 && 
            (!varTerm.parent || (varTerm.parent === e1.tree && divisibleBy(e1.eqData.factors, varTerm.coeff) && !isCancelable(varTerm, e1)))
            from e1.eqData.varOperands;
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "divideByXCoefficient", varTerm.coeff);
        ri: rowInfo;
        e2: TreeExp e2.side !== e1.side && divisibleBy(e2.eqData.factors, varTerm.coeff) && !isCancelable(varTerm, e2);
    }
    then{
        
        //special case: dividing by -1 when there are additional var terms with coeff 1 leads to infinite search
        if (varTerm.coeff === -1) {
            if ((e1.eqData.varOperands.find((vo)=>vo.coeff === 1)) ||
                e2.eqData.varOperands.find((vo)=>vo.coeff === 1)) {
                backtrack();
            }
        } else {
            var side1 = e1.side;
            var expBefore = getFullStr(e1, e2);
            var preParse1 = mathUtil.divideBy(e1.tree.toString(), varTerm.coeff);
            var preParse2 = mathUtil.divideBy(e2.tree.toString(), varTerm.coeff);
            var preParseInput = e1.side === "left" ? preParse1+' = '+preParse2 : preParse2+' = '+preParse1;
            
            
            var newExp1 = algParse(preParse1, true, true);//algApplyRules(algParse(preParse1, true, true), ["popNegation"]);
            var newExp2 = algParse(preParse2, true, true);//algApplyRules(algParse(preParse2, true, true), ["popNegation"]);
            
            var newExp1Str = newExp1.toString();
            var newExp2Str = newExp2.toString();
            var newFull = newExp1Str < newExp2Str ? newExp1Str + ' = ' + newExp2Str : newExp2Str + ' = ' + newExp1Str;
            var input = (e1.side === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str);
            var newOpStr = ci.opStr+'t,divideByXCoefficient '+varTerm.coeff+';';
            var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
            var divType = (e1.eqData.operation === "simple" && e2.eqData.operation === "simple") ? "division-simple" : "division-complex";
            setCTNodeData(toMemo);
            if (ci.searchType === "abstract" || ci.selection === "hint") {
                assert(new Skill(divType, "transformation"));
            }
            
            //gen diagram data
            if (ci.isNextStepSearch || ci.searchType === "detailed") {
                var newTrans = {
                    operation: 'division',
                    operand: varTerm.coeff,
                    expBefore: expBefore,
                    expAfter: input
                };
                modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
            }
            var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
            if (ci.isNextStepSearch) {
                
                //diagram first data
                if (p.diagramsFirst && p.generatingSteps && !dupInput) {
                    let stepHints = [
                        "Which diagram represents a good next step?",
                        "Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
                    ];
                    let stepSkills = {
                        diagram: ["selectd-divide-"+divType.split('-')[1]],
                        typein: [divType]
                    };
                    addValidStep('division', varTerm.coeff, expBefore, input, stepHints, stepSkills);
                }
                
                if ((!p.forceSimplify || !ci.canSimplify) &&
                    (p.generatingSteps || isNextStep("division", varTerm.coeff, p))) {
                    assert(new Hint(`You have a variable with a coefficient on the ${side1} side.  You can get the variable by itself by dividing both sides by the coefficient.`));
                    assert(new Hint(`Divide both sides by the coefficient of ${p.varName}, which is ${varTerm.coeff}`));
                    if (p.dragNDrop) {
                        var pt = getFacts("PartialTransformation")[0];
                        if (!pt) {
                            assert(new Hint("Drag the division operator onto the "+f+" side."));
                        }
                    } else {
                        assert(new Hint("Enter "+preParseInput));
                    }
                    checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
                }
                backtrack();
            } else if (dupInput) {
                backtrack();
            } else {
                recordInput(toMemo, 'full-'+ci.searchType);
                let ciMods = {"modified": true, "opStr": newOpStr};
                if (ci.searchType === "abstract") {
                    ciMods.needSimp = true;
                } else {
                    ciMods.reqTransformations = ci.reqTransformations.slice(1);
                }
                
                equationChanged(e1, newExp1, {'dividedBy': ''+varTerm.coeff});
                equationChanged(e2, newExp2, {'dividedBy': ''+varTerm.coeff});
                
                //check if step matches diagram picked (diagram first only)
                if (!p.generatingSteps && !isNextStep("division", varTerm.coeff, p)) {
                    ciMods.inputIsBug = true;
                    ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
                }
                
                bulkModify(ci, ciMods);
            }
        }
    }
}


rule divideByAbsValOfXCoefficient {
    salience: 6;
    when {
        //side1
        // one operand of ^ is var term
        // coeff of ^ is not 1
        //rest of side1 is divisible by ^
        //side2 is divisible by ^
        p: Problem;
        e1: TreeExp; //e1.eqData.varOperands.length === 1 && !hasCancelable(e1) {side: side1};
        varTerm: Object varTerm.coeff < -1 && 
            (!varTerm.parent || (varTerm.parent === e1.tree && divisibleBy(e1.eqData.factors, varTerm.coeff) && !isCancelable(varTerm, e1)))
            from e1.eqData.varOperands;
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "divideByAbsValOfXCoefficient", getAbs(varTerm.coeff));
        ri: rowInfo;
        e2: TreeExp e2.side !== e1.side && divisibleBy(e2.eqData.factors, varTerm.coeff) && !isCancelable(varTerm, e2);
    }
    then{
        var absVal = getAbs(varTerm.coeff);
        var side1 = e1.side;
        var expBefore = getFullStr(e1, e2);
        var preParse1 = mathUtil.divideBy(e1.tree.toString(), absVal);
        var preParse2 = mathUtil.divideBy(e2.tree.toString(), absVal);
        var preParseInput = e1.side === "left" ? preParse1+' = '+preParse2 : preParse2+' = '+preParse1;
        
        
        var newExp1 = algParse(preParse1, true, true);//algApplyRules(algParse(preParse1, true, true), ["popNegation"]);
        var newExp2 = algParse(preParse2, true, true);//algApplyRules(algParse(preParse2, true, true), ["popNegation"]);
        
        var newExp1Str = newExp1.toString();
        var newExp2Str = newExp2.toString();
        var newFull = newExp1Str < newExp2Str ? newExp1Str + ' = ' + newExp2Str : newExp2Str + ' = ' + newExp1Str;
        var input = (e1.side === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str);
        var newOpStr = ci.opStr+'t,divideByAbsValOfXCoefficient '+absVal+';';
        var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
        var divType = (e1.eqData.operation === "simple" && e2.eqData.operation === "simple") ? "division-simple" : "division-complex";
        setCTNodeData(toMemo);
        if (ci.searchType === "abstract" || ci.selection === "hint") {
            assert(new Skill(divType, "transformation"));
        }
        
        //gen diagram data
        if (ci.isNextStepSearch || ci.searchType === "detailed") {
            var newTrans = {
                operation: 'division',
                operand: absVal,
                expBefore: expBefore,
                expAfter: input
            };
            modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
        }
        var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
        if (ci.isNextStepSearch) {
            //don't recommend this step (sub-optimal)
            backtrack();
        } else if (dupInput) {
            backtrack();
        } else {
            recordInput(toMemo, 'full-'+ci.searchType);
            let ciMods = {"modified": true, "opStr": newOpStr};
            if (ci.searchType === "abstract") {
                ciMods.needSimp = true;
            } else {
                ciMods.reqTransformations = ci.reqTransformations.slice(1);
            }
            
            equationChanged(e1, newExp1, {'dividedBy': ''+absVal});
            equationChanged(e2, newExp2, {'dividedBy': ''+absVal});
            
            //check if step matches diagram picked (diagram first only)
            if (!p.generatingSteps && !isNextStep("division", absVal, p)) {
                ciMods.inputIsBug = true;
                ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
            }
            
            bulkModify(ci, ciMods);
        }
    }
}

/*
transformation

move terms according to like/unlike terms
term moved (t1) must be a simpleTerm, i.e. simplified (can't move 6/3, for ex.)
*/
rule addSubtractSimpleTerm{
    salience : 8;
    when {
        //side1 operator is plus
        //  pick a term of ^
        //side1 has another term that is unlike ^
        //side2 has a term that is like ^
        //the term to move cannot be cancelled
        p: Problem;
        subtractFrom: TreeExp subtractFrom.tree.operator === "PLUS" && subtractFrom.tree.sign === 1 {side: fromSide};
        otherSide: TreeExp otherSide.side !== subtractFrom.side {side: toSide};
        term: Object from getSubtractableTerms(subtractFrom, otherSide);
        ci: cycleInfo ci.selection === "hint" || (!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "addSubtractSimpleTerm", term.term.toString());
        ri: rowInfo;
    }
    then {
        var expBefore = getFullStr(subtractFrom, otherSide);
        var subtractingConst = mathUtil.isConst(term.term);
        var termStr = term.term.toString();
        var addOrSub = "subtraction";
        var absTermStr = termStr;
        var newExp1 = algParse(algApplyRules(subtractFrom.tree.toString()+'-'+termStr, ["flatten"]), true, true);
        var newExp2 = algParse(algApplyRules(otherSide.tree.toString()+'-'+termStr, ["flatten"]), true, true);
        var hasUnallowedNeg = false;
        if (!p.solvingForX && !p.allowNegativeTerms) {
            var newExp2Simplified = algParse(algSimplify(newExp2));
            if (hasNegativeTerms(newExp2Simplified)) {
                hasUnallowedNeg = true;
            }
        } 
        
        newExp1Str = newExp1.toString();
        newExp2Str = newExp2.toString();
        var newFull = newExp1Str < newExp2Str ? newExp1Str + ' = ' + newExp2Str : newExp2Str + ' = ' + newExp1Str;
        var input = (subtractFrom.side === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str);
        var newOpStr = ci.opStr+'t,addSubtractSimpleTerm '+termStr+';';
        var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
        if (termStr.charAt(0) === "-") {
            addOrSub = "addition";
            absTermStr = termStr.slice(1);
        }
        
        setCTNodeData(toMemo);
        let skill = termStr.includes(p.varName) ? "subtraction-var" : "subtraction-const";
        if (ci.searchType === "abstract" || ci.selection === "hint") {
            assert(new Skill(skill, "transformation"));
        }
        
        //gen diagram data
        if (ci.isNextStepSearch || ci.searchType === "detailed") {
            var newTrans = {
                operation: addOrSub,
                operand: absTermStr,
                expBefore: expBefore,
                expAfter: input
            };
            
            modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
        }
        
        var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
        if (ci.isNextStepSearch) {
            setChainPriority(1);
            if (!hasUnallowedNeg) {
                //diagram first data
                if (p.diagramsFirst && p.generatingSteps && !dupInput) {
                    let stepHints = [
                        "Which diagram represents a good next step?",
                        "Remember that you need to keep the lengths of the tapes equal so they are \"balanced\""
                    ];
                    let stepSkills = {
                        diagram: ["selectd-"+( addOrSub === "addition" ? "add" : "subtract" )+(termStr.includes(p.varName) ? '-var' : '-const')],
                        typein: [skill]
                    };
                    addValidStep(addOrSub, absTermStr, expBefore, input, stepHints, stepSkills);
                }
                
                if ((!p.forceSimplify || !ci.canSimplify) &&
                    (p.generatingSteps || isNextStep(addOrSub, absTermStr, p))) {
                    var moving = (subtractingConst ? "constants" : "variables");
                    assert(new Hint("You have "+moving+" on both sides.  How can you have all "+moving+" on the "+toSide+" and none on the "+fromSide+"?"));
                    assert(new Hint("How can you get rid of "+termStr+" on the "+fromSide+"?"));
                    let btmOut = addOrSub === "addition" ?
                                        "Add "+absTermStr+" to both sides." :
                                        "Subtract "+absTermStr+" from both sides.";
                    assert(new Hint(btmOut));
                    if (p.dragNDrop) {
                        var pt = getFacts("PartialTransformation")[0];
                        if (!pt) {
                            assert(new Hint("Drag the "+addOrSub+" sign onto the "+s+" side."));
                        }
                    } else {
                        assert(new Hint("Enter "+input));
                    }
                    checkSAI({selection: "solve"+(16-p.rows.length), action: "UpdateTextField", input: input});
                }
            }
            backtrack();
        } else if (dupInput) {
            backtrack();
        } else {
            recordInput(toMemo, 'full-'+ci.searchType);
            let ciMods = {"modified": true, "opStr": newOpStr};
            if (ci.searchType === "abstract") {
                ciMods.needSimp = true;
            } else {
                ciMods.reqTransformations = ci.reqTransformations.slice(1);
            }
            
            equationChanged(subtractFrom, newExp1, {"varOrConstSide": subtractingConst ? "var" : "const"});
            equationChanged(otherSide, newExp2, {"varOrConstSide": subtractingConst ? "const" : "var"});
            
            if (hasUnallowedNeg) {
                ciMods.inputIsBug = true;
                ciMods.bugMessage = "That is correct, but let's try a different way so that you do not have to see negative numbers!";
            }else if (!p.generatingSteps && !isNextStep(addOrSub, absTermStr, p)) { //check if step matches diagram picked (diagram first only)
                ciMods.inputIsBug = true;
                ciMods.bugMessage = "This step is correct, but you should try to follow the step based on the tape diagram you selected.";
            }
            
            bulkModify(ci, ciMods);
        }
    }
}

/*
    BUG - non-strategic move of a term
    moving term t is considered 'non-strategic' if any of the following conditions are met:
        -there is a like term on the same side as t
        -there is no like term on the other side
        -there is no unlike term on the same side as t
*/
rule nonStrategicAddSubtractSimpleTerm {
    salience: -2;
    when {
        p: Problem;
        subtractFrom: TreeExp {side: fromSide};
        otherSide: TreeExp otherSide.side !== subtractFrom.side {side: toSide};
        termObj: Object from getNonStrategicSubtractableTerms(subtractFrom, otherSide);
        ci: cycleInfo !ci.opStr && ((!ci.inputIsBug && ci.searchType === "abstract") || nextTransformationIs(ci.reqTransformations, "addSubtractSimpleTerm", termObj.term.term.toString()));
        ri: rowInfo;
    }
    then {
        var term = termObj.term;
        var mistakeType = termObj.type;
        var expBefore = getFullStr(subtractFrom, otherSide);
        var subtractingConst = mathUtil.isConst(term.term);
        var termStr = term.term.toString();
        var addOrSub = "subtraction";
        var absTermStr = termStr;
        var newExp1Str = algApplyRules(subtractFrom.tree.toString()+'-'+termStr, ["flatten"]);
        var newExp2Str = algApplyRules(otherSide.tree.toString()+'-'+termStr, ["flatten"]);
        var newExp1 = algParse(newExp1Str, true, true);
        var newExp2 = algParse(newExp2Str, true, true);
        var newExp1Str = newExp1.toString();
        var newExp2Str = newExp2.toString();
        var newFull = newExp1Str < newExp2Str ? newExp1Str + ' = ' + newExp2Str : newExp2Str + ' = ' + newExp1Str;
        var input = (subtractFrom.side === "left" ? newExp1Str+' = '+newExp2Str : newExp2Str+' = '+newExp1Str);
        var newOpStr = ci.opStr+'t,addSubtractSimpleTerm '+termStr+';';
        var toMemo = ci.searchType === "abstract" ? sortLikeTransformations(newOpStr) : newFull;
        if (termStr.charAt(0) === "-") {
            addOrSub = "addition";
            absTermStr = termStr.slice(1);
        }
        
        setCTNodeData(toMemo);
        
        //gen diagram data
        if (ci.isNextStepSearch || ci.searchType === "detailed") {
            var newTrans = {
                operation: addOrSub,
                operand: absTermStr,
                expBefore: expBefore,
                expAfter: input
            };
            
            modify(ri, "transformations", ri.transformations.slice().concat(newTrans));
        }
        
        var dupInput = inputRepeated(toMemo, 'full-'+ci.searchType);
        
        var bugMessage;
        switch(mistakeType) {
            case 'like_same_side':
                bugMessage = `While that is mathematically correct, it doesn't help you to get ${p.varName} by itself. Instead, try combining the term ${absTermStr} with a like term on the same side.`;
                break;
            case 'no_like_other_side':
                bugMessage = `While that is mathematically correct, it doesn't help you to get ${p.varName} by itself.  Moving the term ${absTermStr} won't allow you to cancel or combine it with anything, since there are no like terms on the other side of the equation.`;
                break;
            case 'no_unlike_same_side':
                bugMessage = `While that is mathematically correct, it doesn't help you to get ${p.varName} by itself.  Moving the term ${absTermStr} leaves no terms to work with on that side.`;
                break;
        }
        
    //  console.log("nonstrategic-addsubtractsimpleterm");
        if (ci.isNextStepSearch || dupInput) {
            backtrack();
        } else {
            recordInput(toMemo, 'full-'+ci.searchType);
            let ciMods = {"modified": true, "opStr": newOpStr, "inputIsBug": true, "bugMessage": bugMessage};
            if (ci.searchType === "abstract") {
                ciMods.needSimp = true;
            } else {
                ciMods.reqTransformations = ci.reqTransformations.slice(1);
            }
            
            equationChanged(subtractFrom, newExp1, {"varOrConstSide": subtractingConst ? "var" : "const"});
            equationChanged(otherSide, newExp2, {"varOrConstSide": subtractingConst ? "const" : "var"});
            
            bulkModify(ci, ciMods);
        }
    }
}